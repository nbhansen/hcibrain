name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run Black (Code Formatting)
      run: |
        black --check --diff src/ tests/
        
    - name: Run Ruff (Linting & Code Quality)
      run: |
        ruff check src/ tests/ --output-format=github
        
    - name: Run MyPy (Type Checking)
      run: |
        mypy src/ --show-error-codes
        
    - name: Run Bandit (Security Analysis)
      run: |
        bandit -r src/ -ll -f json -o bandit-report.json || true
        bandit -r src/ -ll
        
    - name: Check Complexity (Radon)
      run: |
        radon cc src/ -s -n B
        radon mi src/ -s -n B
        
    - name: Run Tests with Coverage
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=term-missing
        
    - name: Dead Code Analysis (Vulture)
      run: |
        vulture src/ --min-confidence 80 || true
        
    - name: Upload coverage reports to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Quality Gate - Fail on Critical Issues
      run: |
        # Fail if there are high-severity security issues
        if [ -f bandit-report.json ]; then
          HIGH_SEVERITY=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-report.json)
          if [ "$HIGH_SEVERITY" -gt 0 ]; then
            echo "❌ Found $HIGH_SEVERITY high-severity security issues"
            exit 1
          fi
        fi
        
        # Fail if complexity is too high
        COMPLEX_FUNCTIONS=$(radon cc src/ -j | jq '[.[].functions[] | select(.complexity > 15)] | length')
        if [ "$COMPLEX_FUNCTIONS" -gt 0 ]; then
          echo "❌ Found $COMPLEX_FUNCTIONS functions with complexity > 15"
          exit 1
        fi
        
        echo "✅ All quality gates passed"