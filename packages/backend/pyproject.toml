[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hci-extractor"
version = "0.1.0"
description = "Extract structured content from HCI academic papers"
authors = [{name = "HCI Research Team"}]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "pymupdf>=1.24.0",
    "google-generativeai>=0.3.0",
    "aiohttp>=3.9.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "python-multipart>=0.0.6",
    "fuzzywuzzy>=0.18.0",
    "python-levenshtein>=0.12.0",
]

# Note: Dev dependencies moved to root pyproject.toml for workspace-level management
# This keeps the backend package focused on runtime dependencies

[project.scripts]
hci-extractor = "hci_extractor.main:cli"

[tool.black]
line-length = 88
target-version = ['py39']

[tool.mypy]
python_version = "3.9"
strict = true

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    # Current rules
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    
    # Code complexity and quality
    "C90",  # mccabe complexity
    "B",    # flake8-bugbear (catches common bugs)
    "C4",   # flake8-comprehensions
    "S",    # flake8-bandit (security)
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented code)
    "PL",   # pylint
    "TRY",  # tryceratops (exception handling)
    "RUF",  # ruff-specific rules
]

ignore = [
    # Documentation (we'll enable gradually)
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "D200", "D205", "D212", "D400", "D401", "D415",
    
    # Annotations (we'll enable gradually)
    "ANN001", "ANN002", "ANN003", "ANN101", "ANN102", "ANN201", "ANN202",
    
    # Allow TODO comments for now
    "TD002", "TD003", "FIX002",
    
    # Allow magic numbers for now
    "PLR2004",
    
    # Allow complex functions for now (we'll fix these)
    "PLR0912", "PLR0913", "PLR0915",
    # Interface and infrastructure patterns
    "ARG001", "ARG002", "ARG003",  # Unused arguments common in interfaces
    "PLC0415",  # Import outside top-level (common in CLI and lazy loading)
    "B904",     # Raise without from (acceptable in domain boundaries)
    "TRY003",   # Vanilla exceptions (acceptable for domain-specific errors)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG", "PLR2004"]  # Allow assert, unused args, magic numbers in tests
"scripts/*" = ["T201"]  # Allow print statements in scripts
"src/hci_extractor/cli/commands.py" = ["C901", "PLR0912", "PLR0915", "F401", "RUF001", "E501"]  # Allow CLI complexity and detection imports
"src/hci_extractor/web/routes/*" = ["B008", "E501", "SIM105"]  # Allow FastAPI patterns, long lines, OSError handling
"src/hci_extractor/cli/command_modules/*" = ["PLC0415", "C901", "PTH123", "TRY301", "E501"]  # Allow CLI complexity patterns